plugins {
	id 'com.gradleup.shadow'
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common

	// Files in this configuration will be bundled into your mod using the Shadow plugin.
	// Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
	modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowBundle(project(path: ":common", configuration: "transformProductionNeoForge"))
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/neoforge.mods.toml") {
		expand "version": project.version
	}
}

shadowJar {
	exclude "fabric.mod.json"
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = "dev-shadow"
}

remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = null
}

tasks.register("moveForgeBuilds") {
	doLast {
		delete fileTree("../build/release").matching {
			include "**/neoforge*"
		}
		delete fileTree("../build/libs").matching {
			include "**/neoforge*"
		}
		delete fileTree("../build/latest").matching {
			include "**/neoforge*"
		}
		copy {
			from "build/libs"
			include "*${rootProject.minecraft_version}.jar"
			into "../build/release"
			rename "(.+)", "${rootProject.name}-\$1"
		}
		copy {
			from "build/libs"
			into "../build/latest"
			rename { fileName -> "${rootProject.name}-${fileName.replace(rootProject.mod_version, "latest")}" }
		}
		copy {
			from "build/libs"
			include "*${rootProject.properties.minecraft_version}-dev-shadow.jar"
			into "../build/libs"
			rename "(.+)", "${rootProject.name}-\$1"
		}
	}
}

afterEvaluate {
	for (def task in it.tasks) {
		if (task == tasks.build) {
			task.finalizedBy tasks.moveForgeBuilds
		}
	}
}
